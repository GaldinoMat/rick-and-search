import { Character, CharacterState } from "@/store/modules/data/types";
import { GetStaticPaths, GetStaticProps } from "next/types";
import React, { useEffect, useState } from "react";
import { api } from "../api/api";
import FavouriteButton from "@/components/FavouriteButton";
import { useDispatch, useSelector } from "react-redux";
import { handleAddFavourite } from "@/components/CharactersSection/CharacterCard";
import {
  favouriteCharacter,
  removeFavorite,
} from "@/store/modules/data/actions";
import Image from "next/image";
import styled from "styled-components";
import Head from "next/head";

type CharacterType = {
  data: Character;
};

const CharacterContainer = styled.section`
  padding: 0 2.125rem;
  padding-top: 6.25rem;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
`;

const ImageContainer = styled.div`
  position: relative;
  width: 15.375rem;
  height: 15.375rem;
  margin: 0 auto;

  img {
    border-radius: 0.5rem;
  }
`;

const DetailsContainer = styled.div`
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
`;

const CharacterTitleContainer = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 0.5rem;
`;

const CharacterTitle = styled.h1`
  font-size: 1.5rem;
  max-width: 10rem;
`;

const AliveStatus = styled.p`
  padding: 0.5rem;
  width: 73px;
  background-color: #27ae60;
  color: white;
  border-radius: 0.5rem;
  font-weight: 500;
  text-align: center;
`;

const DeadStatus = styled.p`
  padding: 0.5rem;
  width: 73px;
  background-color: #eb5757;
  color: white;
  border-radius: 0.5rem;
  font-weight: 500;
  text-align: center;
`;

const UnknownStatus = styled.p`
  padding: 0.5rem;
  width: 73px;
  background-color: #333333;
  color: white;
  border-radius: 0.5rem;
  font-weight: 500;
  text-align: center;
`;

function Character({ data }: CharacterType) {
  const dispatch = useDispatch();

  const [isFavorite, setIsFavorite] = useState(false);
  const favouritesData = useSelector<CharacterState, CharacterState>(
    (state) => state
  )?.characters?.favourites;

  useEffect(() => {
    const favouritesJsonData = Array.from<Character>(
      JSON.parse(window.localStorage.getItem("favourites") as string)
    );
    setIsFavorite(
      favouritesJsonData.some((favourite) => favourite?.id === data?.id)
    );
  }, [data?.id, favouritesData]);

  return (
    <>
      <Head>
        <title>Rick and Searchy! | Character Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CharacterContainer data-testid="test-character-page">
        <ImageContainer>
          <Image
            src={data?.image}
            fill
            alt={`${data?.name}'s image`}
            priority
          />
        </ImageContainer>
        <DetailsContainer>
          <FavouriteButton
            handleAddFavourite={handleAddFavourite}
            character={data}
            dispatch={dispatch}
            addCallback={favouriteCharacter}
            deleteCallback={removeFavorite}
            data={favouritesData}
            isFavorite={isFavorite}
          />
          <CharacterTitleContainer>
            <CharacterTitle data-testid="test-character-name">
              {data?.name}
            </CharacterTitle>
            {data?.status === "Alive" ? (
              <AliveStatus>{data?.status}</AliveStatus>
            ) : data?.status === "Dead" ? (
              <DeadStatus>{data?.status}</DeadStatus>
            ) : (
              <UnknownStatus>{data?.status}</UnknownStatus>
            )}
          </CharacterTitleContainer>
          <div>
            <p>Gender: {data?.gender}</p>
            <p>Species: {data?.species}</p>
            <p>Origin: {data?.origin?.name}</p>
            <p>Location: {data?.location.name}</p>
            <p>Created at: {data?.created}</p>
            <p>Episodes total: {data?.episode.length}</p>
          </div>
        </DetailsContainer>
      </CharacterContainer>
    </>
  );
}

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: true,
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const { data } = await api.get(`/${params?.id}`);

  return {
    props: { data },
  };
};

export default Character;
